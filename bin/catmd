#!/usr/bin/env python3
from os.path import exists
from rich.console import Console
from rich.markdown import Markdown
import atexit
import os
import re
import sys
import time

IMG_REGX="^!.([^]]*)..([^)]*).$"
IMG_BASE="/tmp/tmp_catmd_"
IMG_ID=0
TICK='✅' # ✘ ⛝
EMPTY='⬛' # ⬜ ⛶

def icatDisplay(image):
    os.system(f"kitty +kitten icat {image} 2>/dev/null || true")

def displayImage(fileBaseName, isPlantUml):
    global IMG_ID

    if isPlantUml:
        os.system(f"plantuml -f png -output /tmp {fileBaseName}.txt 2>/dev/null || true")
    else:
        os.system(f"dot -Tpng -o {fileBaseName}.png {fileBaseName}.txt 2>/dev/null || true")

    icatDisplay(f"{fileBaseName}.png")
    IMG_ID+=1

def processFile(markdownFileName):
    section=''
    inUml=False
    markdownFile=open(markdownFileName,'r')
    console = Console(color_system="auto")

    for line in markdownFile:
        imageMatches = re.search(IMG_REGX, line.strip())
        line = line.replace('- [x]','- ' + TICK)
        line = line.replace('- [ ]','- ' + EMPTY)

        if imageMatches:
            console.print(Markdown(section))
            icatDisplay(imageMatches.group(2))
            section=''
        elif line.strip() == '```plantuml':
            console.print(Markdown(section))
            inUml = True
            section=''
        elif line.strip() == '```' and inUml:
            with open(f"{IMG_BASE}{IMG_ID}.txt", 'w') as txtFile:
                txtFile.write(section)
                txtFile.close()

            displayImage(f"{IMG_BASE}{IMG_ID}", section.startswith('@startuml'))
            inUml = False
            section=''
        else:
            section += line

    console.print(Markdown(section))
    markdownFile.close()

def cleanup():
    # Either need a wait or use atexit or sleep for icat, as its process holds the file...
    # HACK FOR NOW :-(
    time.sleep(0.2) # 200ms

    for j in range(IMG_ID):
        if exists(f"{IMG_BASE}{j}.txt"):
            os.remove(f"{IMG_BASE}{j}.txt")

        if exists(f"{IMG_BASE}{j}.png"):
            os.remove(f"{IMG_BASE}{j}.png")

def main():
    atexit.register(cleanup)
    markdownFileName=sys.argv[1]
    processFile(markdownFileName)

if __name__ == "__main__":
    main()

